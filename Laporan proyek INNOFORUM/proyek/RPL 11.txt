Pada pertemuan ke-11 mata kuliah Rekayasa Perangkat Lunak Lanjut, kita mempelajari Software Quality Management (SQM) dalam konteks CMMI Level 3. SQM adalah proses sistematis untuk memastikan perangkat lunak berkualitas tinggi, tidak hanya berfungsi, tetapi juga memenuhi kebutuhan pengguna, andal, efisien, aman, mudah dipelihara, dan memberikan kepuasan pengguna. SQM terdiri dari tiga komponen utama: Quality Planning, Quality Assurance (QA), dan Quality Control (QC). Quality Planning berfokus pada perencanaan awal, seperti menetapkan standar kualitas, metrik seperti defect density, dan menyusun Quality Management Plan. Misalnya, untuk aplikasi perbankan, diperlukan enkripsi AES 256, ketersediaan sistem 24/7, dan respons API di bawah satu detik. Quality Assurance (QA) bersifat preventif, memastikan proses pengembangan sesuai standar melalui aktivitas seperti audit, review dokumen, pelatihan tim, dan penggunaan alat bantu seperti SonarQube atau Jenkins. Contohnya, dalam tim Agile, QA memantau kepatuhan terhadap Definition of Done. Sementara itu, Quality Control (QC) bersifat reaktif, mengevaluasi produk akhir melalui pengujian fungsional dan non-fungsional, seperti unit testing hingga User Acceptance Testing, serta mengelola bug report dan menyusun Test Summary Report. Ketiga aspek ini saling terkait: Quality Planning memberikan arah, QA menjaga konsistensi proses, dan QC memastikan produk bebas cacat. Jika salah satu diabaikan, kualitas perangkat lunak bisa terganggu. Standar mutu seperti ISO 9001, IEEE 730, dan ISO/IEC 25010 digunakan untuk menjaga konsistensi dan kepuasan pengguna. ISO/IEC 25010, misalnya, mendefinisikan delapan karakteristik kualitas, seperti usability, security, dan maintainability. Metrik kualitas, seperti Lines of Code (prediktif) atau Defect Density (kontrol), membantu memantau dan mengevaluasi kualitas. Proses pengukuran meliputi penetapan tujuan, pemilihan metrik, pengumpulan data dengan alat seperti JIRA, analisis, dan tindakan perbaikan. Namun, pengukuran kualitas memiliki keterbatasan, seperti ketidakmampuan mengukur semua aspek secara kuantitatif. Oleh karena itu, perlu menggabungkan metrik kuantitatif (misalnya, test coverage) dan kualitatif (misalnya, umpan balik pengguna) serta mempertimbangkan konteks proyek. Secara keseluruhan, SQM memastikan perangkat lunak berkualitas tinggi melalui proses yang terstruktur, mendukung keandalan, efisiensi, keamanan, dan kepuasan pengguna.







Untuk menjamin kualitas perangkat lunak tetap konsisten, digunakan standar mutu seperti ISO 9001 (untuk sistem manajemen mutu secara umum), IEEE 730 (untuk menyusun rencana QA), dan ISO/IEC 25010 yang mendefinisikan delapan karakteristik kualitas software, seperti usability, security, reliability, dan maintainability.

Selain standar, metrik kualitas juga penting untuk mengukur kualitas software secara objektif. Ada dua jenis:

Metrik prediktif (misalnya Lines of Code, Function Points) → digunakan sejak awal pengembangan.

Metrik kontrol (misalnya Defect Density, Bug Leakage, Code Coverage) → digunakan untuk evaluasi selama dan setelah proses pengujian.

Proses pengukuran kualitas mencakup:

Menentukan tujuan pengukuran (misalnya, mengevaluasi kualitas kode atau kepuasan pengguna),

Memilih metrik yang tepat,

Mengumpulkan data dengan tools seperti JIRA, SonarQube, atau Google Form,

Menganalisis hasilnya dan

Menentukan tindakan perbaikan (misalnya refactor kode, pelatihan tim, atau perbaikan desain UI).

Tapi perlu diingat, pengukuran kualitas juga punya keterbatasan, karena nggak semua hal bisa diukur secara angka. Maka dari itu, kita perlu gabungkan metrik kuantitatif (seperti test coverage) dan kualitatif (seperti feedback pengguna), serta mempertimbangkan konteks proyek, seperti jenis aplikasi atau fase pengembangan.
